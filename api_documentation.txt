# API Documentation: Registros de Entregas

## API Endpoints

- `GET /registros/` - Lista todos os registros de entrega (paginado)
- `POST /registros/` - Cria um novo registro de entrega
- `GET /registros/{id}/` - Obtém detalhes de um registro específico
- `PUT /registros/{id}/` - Atualiza um registro de entrega completo
- `PATCH /registros/{id}/` - Atualiza parcialmente um registro de entrega
- `DELETE /registros/{id}/` - Remove um registro de entrega
- `POST /registros/{id}/upload_images/` - Endpoint especial para upload de imagens
- `GET /registros/{id}/diagnostic/` - Endpoint para diagnóstico técnico

## Modelo de Dados

O principal modelo é o `RegistroEntrega` com os seguintes campos:

- `id` (UUID): Identificador único do registro
- `obra_id` (String): ID da obra
- `data_entrega` (Date): Data de entrega
- `numero_instalacao` (String): Número de instalação
- `numero_obra` (String): Número da obra
- `assinatura` (Text): Assinatura em formato Base64
- `imagem` (Text): Imagem principal em formato Base64
- `imagens` (JSON): Lista de imagens adicionais em formato Base64
- `notas` (Text): Observações sobre a entrega
- `data_criacao` (DateTime): Data de criação do registro
- `criado_em` (DateTime): Timestamp automático de criação
- `atualizado_em` (DateTime): Timestamp da última atualização
- `criado_por` (User): Usuário que criou o registro

## Formato de Requisição e Resposta

### Formato de Resposta API

Os dados são retornados em formato camelCase para o frontend:

```json
{
  "id": "550e8400-e29b-41d4-a716-446655440000",
  "obraId": "123",
  "dataEntrega": "2023-10-01",
  "numeroInstalacao": "INS001", 
  "numeroObra": "OBR001",
  "assinatura": "data:image/png;base64,...",
  "imagem": "data:image/png;base64,...",
  "imagens": ["data:image/png;base64,...", "data:image/png;base64,..."],
  "notas": "Observações sobre a entrega",
  "dataCriacao": "2023-10-01T12:00:00Z",
  "criadoPor": {
    "id": 1,
    "username": "admin",
    "first_name": "Admin",
    "last_name": "User"
  }
}
```

### Formato para Criação/Atualização

Envie dados em formato camelCase:

```json
{
  "obraId": "123",
  "dataEntrega": "2023-10-01", 
  "numeroInstalacao": "INS001",
  "numeroObra": "OBR001",
  "assinatura": "data:image/png;base64,...",
  "imagem": "data:image/png;base64,...",
  "imagens": ["data:image/png;base64,..."],
  "notas": "Observações sobre a entrega"
}
```

## Upload de Imagens

O endpoint especial para upload de imagens aceita formulários multipart:

```
POST /registros/{id}/upload_images/
```

Envie arquivos de imagem com nomes `imagem_0`, `imagem_1`, etc. O sistema automaticamente converterá para Base64 e adicionará à lista de imagens do registro.

## Filtragem e Busca

A API suporta:

- **Filtragem** por: `numero_obra`, `numero_instalacao`, `data_entrega`, `data_criacao`
- **Busca textual** em: `numero_obra`, `numero_instalacao`, `notas`
- **Ordenação** por: `data_entrega`, `data_criacao`, `criado_em`

Exemplos:
- `/registros/?numero_obra=OBR001`
- `/registros/?search=termo_busca`
- `/registros/?ordering=-data_entrega`

## Paginação

Os resultados são paginados. A resposta inclui:

```json
{
  "count": 100,
  "next": "http://api.exemplo.com/registros/?page=2",
  "previous": null,
  "results": [...]
}
```

## Autenticação

O sistema suporta autenticação de usuário, embora não seja estritamente obrigatória para todas as operações. Quando autenticado, o sistema armazena o usuário criador no campo `criado_por`.

Para operações seguras, utilize autenticação por token ou sessão conforme configurado no projeto Django.
