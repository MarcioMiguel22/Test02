# Integração do campo "Criado Por" no Frontend

## Resumo das Alterações no Backend

Foi adicionado um novo campo `criado_por` ao modelo `RegistroEntrega` que rastreia qual usuário criou cada registro. Esta informação é automaticamente preenchida pelo backend quando um novo registro é criado.

## Formato dos Dados na API

O campo é retornado pelo endpoint da API no seguinte formato:

```json
{
  "id": "uuid-aqui",
  "obraId": "123",
  "dataEntrega": "2023-10-01",
  "numeroInstalacao": "INS001",
  "numeroObra": "OBR001",
  "assinatura": "...",
  "imagem": "...",
  "imagens": [...],
  "notas": "...",
  "dataCriacao": "2023-10-01T10:00:00Z",
  "criadoPor": {
    "id": 1,
    "username": "usuario",
    "first_name": "Nome",
    "last_name": "Sobrenome"
  }
}
```

Se o registro foi criado antes desta atualização ou se foi criado por um sistema automatizado, o campo `criadoPor` pode ser `null`.

## Implementação no Frontend

### 1. Exibindo o Criador do Registro

Você pode exibir o nome completo do criador na visualização do registro:

```jsx
// Exemplo com React
const DisplayCreator = ({ registro }) => {
  if (!registro.criadoPor) {
    return <span>Não especificado</span>;
  }
  
  const { first_name, last_name, username } = registro.criadoPor;
  const displayName = (first_name && last_name) 
    ? `${first_name} ${last_name}` 
    : username;
    
  return <span>{displayName}</span>;
};
```

### 2. Filtragem por Criador (opcional)

Se desejar implementar filtros por criador:

```jsx
// Exemplo de componente de filtro
const CreatorFilter = ({ creators, onFilterChange }) => {
  return (
    <select onChange={e => onFilterChange(e.target.value)}>
      <option value="">Todos os criadores</option>
      {creators.map(creator => (
        <option key={creator.id} value={creator.id}>
          {creator.first_name} {creator.last_name} ({creator.username})
        </option>
      ))}
    </select>
  );
};
```

### 3. Adaptação de Formulários

Não é necessário adicionar o campo `criadoPor` nos formulários de criação ou edição, pois este campo é preenchido automaticamente pelo backend e é somente leitura.

## Observações Importantes

1. O campo é definido automaticamente para o usuário logado quando um registro é criado.
2. O campo não pode ser modificado pelo frontend - é somente leitura.
3. Para visualizar este campo, o usuário precisa estar autenticado no sistema.
4. Considere adicionar este campo nas tabelas e visualizações detalhadas de cada registro.

## Migração do Banco de Dados

Após a atualização do código, o comando `python manage.py migrate` foi executado para adicionar o novo campo ao banco de dados. Todos os registros existentes terão este campo como `null` até que sejam atualizados manualmente, se necessário.

## Exemplo de Exibição em Tabela

```jsx
// Exemplo de exibição em tabela com o criador
const RegistrosTable = ({ registros }) => {
  return (
    <table>
      <thead>
        <tr>
          <th>Obra</th>
          <th>Instalação</th>
          <th>Data</th>
          <th>Criado Por</th>
        </tr>
      </thead>
      <tbody>
        {registros.map(registro => (
          <tr key={registro.id}>
            <td>{registro.numeroObra}</td>
            <td>{registro.numeroInstalacao}</td>
            <td>{new Date(registro.dataEntrega).toLocaleDateString()}</td>
            <td>
              {registro.criadoPor 
                ? `${registro.criadoPor.first_name} ${registro.criadoPor.last_name}` 
                : "Não especificado"}
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  );
};
```
